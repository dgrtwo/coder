---
title: "Benchmarking"
author: "Erik Bulow"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


# Other ICD packages

The `classifyr` package is not the only (nor the first) R package aimed for ICD codes and comorbitity indexes.
Four additional packages (as listed below) were found as by 2016-04-14.

| Package             | Authour           | CRAN | GitHub                     | ICD versions                     |
|---------------------|-------------------|------|----------------------------|----------------------------------|
| icd                 | Jack Wasey        | X    | jackwasey/icd              | ICD9, ICD10, ICD-10-CM           |
| medicalrisk         | Patrick McCormick | X    | patrickmdnet/medicalrisk   | ICD-9-CM                         |
| comorbidities.icd10 | Max Gordon        |      | gforge/comorbidities.icd10 | ICD-9, ICD-10 (US/SWE)           |
| icdcoder            | Wade Cooper       |      | wtcooper/icdcoder          | ICD9, ICD-9-CM, ICD10, ICD-10-CM |


# Packages to compare

The `classifyr` package was initilly targeted for Swedish ICD data. Since Sweden (as opposed to USA)  use
mostly ICD-10 codes (in favour of ICD-9), the `medicalrisk` package is dropped from further comparisons.

The `icdcoder` package is not submitted to CRAN and inspection of the source code
reveals that the package does not yet seem to be ready for production release (it does for example
have some problems with its dependency packages). According to GitHub metrics, the development activity
has been quite limited and we therefore assume that the package is not under active development.
It is therefore not considered further within this comparison.


# Speed comparison

Calling functions from both `icd` and `comorbidities.icd10` by full reference (e. g. `package::fun`)
is problematic due to internal use of non standard evaluation. All compared packages are therefore first
attached (by `library`):


```{r}
library(classifyr)
suppressPackageStartupMessages(library(icd))
suppressPackageStartupMessages(library(comorbidities.icd10))

library(dplyr) # For data management
```

Benchmarking will be performed by calculating Elixhauser comorbidity classes based on ICD-10 codes by corresponding functions from the `icd`, `classifyr` and `comorbidities.icd10`
packages.

First some session info:

```{r}
si <- devtools::session_info(c("icd", "classifyr", "comorbidities.icd10"))
si$packages <- 
  si$packages %>% 
  filter(package %in% c("icd", "classifyr", "comorbidities.icd10")) %>% 
  select(-source)
si
```


We prepare a function to return a list with unevaluated calls to correspinding functions in specified packages:


```{r}
uneval_list <- function(pkgs = c("classifyr", "icd", "comorbidities.icd10")) {
  
  # Initiate a list of expressions to benchmark
  expr <- list()
  
  # Include function "classify" from package "classifyr"
  if ("classifyr" %in% pkgs) expr$classifyr <- substitute(
    
    classify(
      x, 
      by = "elix_icd10", 
      id = "id")
    )
  
  # Include function "icd_comorbid" from package "icd"
  if ("icd" %in% pkgs) expr$icd <- substitute( 
    
    icd_comorbid(
      dplyr::mutate(
        x, 
        id = as.character(id), 
        code = as.character(code)), 
      icd10_map_quan_elix, 
      visit_name = "id", 
      icd_name = "code")
    )
  
  # Include function "cmrbdt.calc" from package "comorbid.icd10"
  if ("comorbidities.icd10" %in% pkgs) expr$comorbidities.icd10 <- substitute( 
    
    cmrbdt.calc(
      x, 
      "id", 
      "code", 
      rep("10", nrow(x)), 
      cmrbdt.finder_fn = cmrbdt.finder.regex.elixhauser_Quan2005)
    )
  
  expr
}
``` 

We make another function to use for benchmarking

```{r}
bm <- function(pkgs = c("classifyr", "icd", "comorbidities.icd10"), ...) {
  microbenchmark::microbenchmark(list = uneval_list(pkgs), ...) %>%
  summary() %>% 
  knitr::kable(digits = 2)
}
```

We will use a randomly generated (totaly "fake"/non personal) dataset of size 10,000. This is of quite moderate size compared to real world data but will be sufficient for now.

```{r}
head(x <- dplyr::sample_n(classifyr::ex_icd10, 1e4, TRUE))
```

The test data set does contain some codes beginning in "UA", "UB" and/or "UP". These are valid codes in the Swedish ICD 10 (2016) version but will not be recognised as such by `comorbidities.icd10`. They must therefore be excluded in order to proced:

```{r}
x <- dplyr::filter(x, !grepl("U[ABP]", code))
```

A data set of `r nrow(x)` is now remaining.

Results in seconds:
```{r}
bm(times = 5, unit = "s")
```

Relative speed differences (with the fastest package used as reference):
```{r}
bm(times = 5, unit = "relative")
```

We thus conclude that `classifyr` is faster than its competitors!





## Some reasons for speed differences

* Both `icd` and `classifyr` relies on matrices, while `comorbidities.icd10` uses data frames. Matrices are generally faster both due to its simpler structure (in this case logical/boolean while the data frame can have different types of classes for each column) and since matrices can be handled effectively through underlying (sub R) numerical C/C++/Fortran librarys such as LAPACK and BLAS.
* `classifyr` relies on compact regular expressions for classification. `comorbidities.icd10` can use regular expressions too (as done above) but the format is less compact. `icd` uses "raw" ICD-10 codes and "search for each possible parent of the given code, up to the three digit 'major'" (https://cran.r-project.org/web/packages/icd/vignettes/icd-10.html). (It might however be recorded as a side note that the `icd` package does rely on a (much) faster procedure when used with ICD-9 codes.)





## A note on RRO

Comparisons above shows result for the latest (released) R version (details shown above).

Even though we would not present any details here, the same benchamrk was performed also on the latest available version (3.2.4) of Revolution R Open (RRO) with both one and then multiple (4) cores. This was done on an Intel i7 machine (an architecture supposed to take full advantage of the Intel Math Kernel Library used by RRO). 

There were no relevant difference observed between one and 4 kernels. 
The `icd` package did perform better with RRO while `classifyr` and `comorbidities.icd10` were performing worse. The ranking among the packages were the same as above although the magnitude of the relative differneces were decreased between `classifyr` and `icd`.
 



# Output

It is abviously important also to compare the output of each function.
The basic output from all functions is a logical "table" with 31 columns (one for every Elixhauser comorbidity class) and one row for every patient.

`icd` and `classifyr` gives this "table" as a logical (boolean) matrix with patient id as row names. 
Each package does however sort their matrices in different orders by default.

The output from `comorbidities.icd10` is more complex. It is a list wherof one element is a data.frame (not a matrix as stated by the help page) with the desired output. The patient id is found as a factor column within the data frame.

We have to transfer the different outputs before they can be compared:

```{r}

all_output <- function(...) {
  
  # Limit the data
  x <- head(x, 100)
  
  # Calculae results for all functions
  res <- lapply(uneval_list(...), eval)
  
  # Transform results to comparable forms
  if (!is.null(res$classifyr)) 
    res$classifyr <-  res$classifyr[order(rownames(res$classifyr)), ]
  
  if (!is.null(res$comorbidities.icd10)) {
    id <- as.character(res$comorbidities.icd10$cmrbdt$id)
    x <- as.matrix(res$comorbidities.icd10$cmrbdt[, -1])
    rownames(x) <- id
    res$comorbidities.icd10 <- x[order(id), ]
  }
  res
}
```

We first conclude that column order is the same although class names are articulated slightly different (the `icd` package offer possibilities for more descriptive names as well):

```{r}
res <- all_output()

as.data.frame(lapply(res, colnames)) %>% 
  knitr::kable()
```


We hope to have achieved the same result for each patient and each comorbidity class. 
```{r}
different <- res$classifyr != res$icd | res$icd != res$comorbidities.icd10
```
Were there any differences observed? `any(different)` says: `r any(different)` (which is intended)!


```{r, echo = FALSE, eval = FALSE}

# Script that might be used for debugging if needed
# Since the meaning of all class names are identical, we will hereafter use the same names regardless of source.
res <- lapply(res, function(x) {colnames(x) <- colnames(res$classifyr); x})
different_rows <- rownames(res$icd)[   matrixStats::rowAnys(different)]
different_cols <- colnames(res$classifyr)[matrixStats::colAnys(different)]
diffs <- lapply(res, function(x) x[rownames(x) %in% different_rows, different_cols, drop = FALSE]) %>%
  {do.call(rbind, .)}

diffs <- do.call(rbind, diffs) %>% 
  cbind(
    source = rep(names(res), each = length(different_rows)),
    id = rownames(diffs$icd)
  ) %>% 
  data.frame(row.names = NULL)
```




